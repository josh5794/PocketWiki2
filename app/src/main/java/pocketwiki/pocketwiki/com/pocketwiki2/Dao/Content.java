package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import pocketwiki.pocketwiki.com.pocketwiki2.Dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTENT".
 */
public class Content {

    private Long contentId;
    private String createdAt;
    private String updatedAt;
    private String description;
    private Long subEntityId;
    private String audioPath;
    private Long languageId;
    private Long areaEntitiesId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContentDao myDao;

    private Language language;
    private Long language__resolvedKey;

    private AreaEntities areaEntities;
    private Long areaEntities__resolvedKey;


    public Content() {
    }

    public Content(Long contentId) {
        this.contentId = contentId;
    }

    public Content(Long contentId, String createdAt, String updatedAt, String description, Long subEntityId, String audioPath, Long languageId, Long areaEntitiesId) {
        this.contentId = contentId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.description = description;
        this.subEntityId = subEntityId;
        this.audioPath = audioPath;
        this.languageId = languageId;
        this.areaEntitiesId = areaEntitiesId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContentDao() : null;
    }

    public Long getContentId() {
        return contentId;
    }

    public void setContentId(Long contentId) {
        this.contentId = contentId;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getSubEntityId() {
        return subEntityId;
    }

    public void setSubEntityId(Long subEntityId) {
        this.subEntityId = subEntityId;
    }

    public String getAudioPath() {
        return audioPath;
    }

    public void setAudioPath(String audioPath) {
        this.audioPath = audioPath;
    }

    public Long getLanguageId() {
        return languageId;
    }

    public void setLanguageId(Long languageId) {
        this.languageId = languageId;
    }

    public Long getAreaEntitiesId() {
        return areaEntitiesId;
    }

    public void setAreaEntitiesId(Long areaEntitiesId) {
        this.areaEntitiesId = areaEntitiesId;
    }

    /** To-one relationship, resolved on first access. */
    public Language getLanguage() {
        Long __key = this.languageId;
        if (language__resolvedKey == null || !language__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageDao targetDao = daoSession.getLanguageDao();
            Language languageNew = targetDao.load(__key);
            synchronized (this) {
                language = languageNew;
            	language__resolvedKey = __key;
            }
        }
        return language;
    }

    public void setLanguage(Language language) {
        synchronized (this) {
            this.language = language;
            languageId = language == null ? null : language.getLanguageId();
            language__resolvedKey = languageId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AreaEntities getAreaEntities() {
        Long __key = this.areaEntitiesId;
        if (areaEntities__resolvedKey == null || !areaEntities__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AreaEntitiesDao targetDao = daoSession.getAreaEntitiesDao();
            AreaEntities areaEntitiesNew = targetDao.load(__key);
            synchronized (this) {
                areaEntities = areaEntitiesNew;
            	areaEntities__resolvedKey = __key;
            }
        }
        return areaEntities;
    }

    public void setAreaEntities(AreaEntities areaEntities) {
        synchronized (this) {
            this.areaEntities = areaEntities;
            areaEntitiesId = areaEntities == null ? null : areaEntities.getAreaEntitiesId();
            areaEntities__resolvedKey = areaEntitiesId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
