package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pocketwiki.pocketwiki.com.pocketwiki2.Dao.AreaEntities;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_ENTITIES".
*/
public class AreaEntitiesDao extends AbstractDao<AreaEntities, Long> {

    public static final String TABLENAME = "AREA_ENTITIES";

    /**
     * Properties of entity AreaEntities.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AreaEntitiesId = new Property(0, Long.class, "areaEntitiesId", true, "AREA_ENTITIES_ID");
        public final static Property CreatedAt = new Property(1, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(2, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property AreaId = new Property(3, Long.class, "areaId", false, "AREA_ID");
        public final static Property EntityId = new Property(4, Long.class, "entityId", false, "ENTITY_ID");
    };

    private Query<AreaEntities> area_AreaEntitiesListQuery;
    private Query<AreaEntities> entity_AreaEntitiesListQuery;

    public AreaEntitiesDao(DaoConfig config) {
        super(config);
    }
    
    public AreaEntitiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_ENTITIES\" (" + //
                "\"AREA_ENTITIES_ID\" INTEGER PRIMARY KEY ," + // 0: areaEntitiesId
                "\"CREATED_AT\" TEXT," + // 1: createdAt
                "\"UPDATED_AT\" TEXT," + // 2: updatedAt
                "\"AREA_ID\" INTEGER," + // 3: areaId
                "\"ENTITY_ID\" INTEGER);"); // 4: entityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_ENTITIES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AreaEntities entity) {
        stmt.clearBindings();
 
        Long areaEntitiesId = entity.getAreaEntitiesId();
        if (areaEntitiesId != null) {
            stmt.bindLong(1, areaEntitiesId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(3, updatedAt);
        }
 
        Long areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindLong(4, areaId);
        }
 
        Long entityId = entity.getEntityId();
        if (entityId != null) {
            stmt.bindLong(5, entityId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AreaEntities readEntity(Cursor cursor, int offset) {
        AreaEntities entity = new AreaEntities( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // areaEntitiesId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // areaId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // entityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AreaEntities entity, int offset) {
        entity.setAreaEntitiesId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEntityId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AreaEntities entity, long rowId) {
        entity.setAreaEntitiesId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AreaEntities entity) {
        if(entity != null) {
            return entity.getAreaEntitiesId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "areaEntitiesList" to-many relationship of Area. */
    public List<AreaEntities> _queryArea_AreaEntitiesList(Long areaId) {
        synchronized (this) {
            if (area_AreaEntitiesListQuery == null) {
                QueryBuilder<AreaEntities> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AreaId.eq(null));
                area_AreaEntitiesListQuery = queryBuilder.build();
            }
        }
        Query<AreaEntities> query = area_AreaEntitiesListQuery.forCurrentThread();
        query.setParameter(0, areaId);
        return query.list();
    }

    /** Internal query to resolve the "areaEntitiesList" to-many relationship of Entity. */
    public List<AreaEntities> _queryEntity_AreaEntitiesList(Long entityId) {
        synchronized (this) {
            if (entity_AreaEntitiesListQuery == null) {
                QueryBuilder<AreaEntities> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EntityId.eq(null));
                entity_AreaEntitiesListQuery = queryBuilder.build();
            }
        }
        Query<AreaEntities> query = entity_AreaEntitiesListQuery.forCurrentThread();
        query.setParameter(0, entityId);
        return query.list();
    }

}
