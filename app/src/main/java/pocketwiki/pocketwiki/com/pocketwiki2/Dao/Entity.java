package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import java.util.List;
import pocketwiki.pocketwiki.com.pocketwiki2.Dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ENTITY".
 */
public class Entity {

    private Long entityId;
    private String createdAt;
    private String updatedAt;
    private String name;
    private String subEntityArray;
    private String imageURLThumb;
    private String imageURLLarge;
    private String imageURLThumbOnline;
    private String imageURLLargeOnline;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EntityDao myDao;

    private List<SubEntity> subEntityList;
    private List<AreaEntities> areaEntitiesList;
    private List<CategoryEntities> categoryEntitiesList;

    public Entity() {
    }

    public Entity(Long entityId) {
        this.entityId = entityId;
    }

    public Entity(Long entityId, String createdAt, String updatedAt, String name, String subEntityArray, String imageURLThumb, String imageURLLarge, String imageURLThumbOnline, String imageURLLargeOnline) {
        this.entityId = entityId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.subEntityArray = subEntityArray;
        this.imageURLThumb = imageURLThumb;
        this.imageURLLarge = imageURLLarge;
        this.imageURLThumbOnline = imageURLThumbOnline;
        this.imageURLLargeOnline = imageURLLargeOnline;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntityDao() : null;
    }

    public Long getEntityId() {
        return entityId;
    }

    public void setEntityId(Long entityId) {
        this.entityId = entityId;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSubEntityArray() {
        return subEntityArray;
    }

    public void setSubEntityArray(String subEntityArray) {
        this.subEntityArray = subEntityArray;
    }

    public String getImageURLThumb() {
        return imageURLThumb;
    }

    public void setImageURLThumb(String imageURLThumb) {
        this.imageURLThumb = imageURLThumb;
    }

    public String getImageURLLarge() {
        return imageURLLarge;
    }

    public void setImageURLLarge(String imageURLLarge) {
        this.imageURLLarge = imageURLLarge;
    }

    public String getImageURLThumbOnline() {
        return imageURLThumbOnline;
    }

    public void setImageURLThumbOnline(String imageURLThumbOnline) {
        this.imageURLThumbOnline = imageURLThumbOnline;
    }

    public String getImageURLLargeOnline() {
        return imageURLLargeOnline;
    }

    public void setImageURLLargeOnline(String imageURLLargeOnline) {
        this.imageURLLargeOnline = imageURLLargeOnline;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SubEntity> getSubEntityList() {
        if (subEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubEntityDao targetDao = daoSession.getSubEntityDao();
            List<SubEntity> subEntityListNew = targetDao._queryEntity_SubEntityList(entityId);
            synchronized (this) {
                if(subEntityList == null) {
                    subEntityList = subEntityListNew;
                }
            }
        }
        return subEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubEntityList() {
        subEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AreaEntities> getAreaEntitiesList() {
        if (areaEntitiesList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AreaEntitiesDao targetDao = daoSession.getAreaEntitiesDao();
            List<AreaEntities> areaEntitiesListNew = targetDao._queryEntity_AreaEntitiesList(entityId);
            synchronized (this) {
                if(areaEntitiesList == null) {
                    areaEntitiesList = areaEntitiesListNew;
                }
            }
        }
        return areaEntitiesList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAreaEntitiesList() {
        areaEntitiesList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CategoryEntities> getCategoryEntitiesList() {
        if (categoryEntitiesList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryEntitiesDao targetDao = daoSession.getCategoryEntitiesDao();
            List<CategoryEntities> categoryEntitiesListNew = targetDao._queryEntity_CategoryEntitiesList(entityId);
            synchronized (this) {
                if(categoryEntitiesList == null) {
                    categoryEntitiesList = categoryEntitiesListNew;
                }
            }
        }
        return categoryEntitiesList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCategoryEntitiesList() {
        categoryEntitiesList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
