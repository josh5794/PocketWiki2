package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import pocketwiki.pocketwiki.com.pocketwiki2.Dao.Content;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTENT".
*/
public class ContentDao extends AbstractDao<Content, Long> {

    public static final String TABLENAME = "CONTENT";

    /**
     * Properties of entity Content.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ContentId = new Property(0, Long.class, "contentId", true, "CONTENT_ID");
        public final static Property CreatedAt = new Property(1, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(2, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property SubEntityId = new Property(4, Long.class, "subEntityId", false, "SUB_ENTITY_ID");
        public final static Property LanguageId = new Property(5, Long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property AreaEntitiesId = new Property(6, Long.class, "areaEntitiesId", false, "AREA_ENTITIES_ID");
    };

    private DaoSession daoSession;


    public ContentDao(DaoConfig config) {
        super(config);
    }
    
    public ContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENT\" (" + //
                "\"CONTENT_ID\" INTEGER PRIMARY KEY ," + // 0: contentId
                "\"CREATED_AT\" TEXT," + // 1: createdAt
                "\"UPDATED_AT\" TEXT," + // 2: updatedAt
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"SUB_ENTITY_ID\" INTEGER," + // 4: subEntityId
                "\"LANGUAGE_ID\" INTEGER," + // 5: languageId
                "\"AREA_ENTITIES_ID\" INTEGER);"); // 6: areaEntitiesId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Content entity) {
        stmt.clearBindings();
 
        Long contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindLong(1, contentId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(3, updatedAt);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Long subEntityId = entity.getSubEntityId();
        if (subEntityId != null) {
            stmt.bindLong(5, subEntityId);
        }
 
        Long languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindLong(6, languageId);
        }
 
        Long areaEntitiesId = entity.getAreaEntitiesId();
        if (areaEntitiesId != null) {
            stmt.bindLong(7, areaEntitiesId);
        }
    }

    @Override
    protected void attachEntity(Content entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Content readEntity(Cursor cursor, int offset) {
        Content entity = new Content( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // contentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // subEntityId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // languageId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // areaEntitiesId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Content entity, int offset) {
        entity.setContentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubEntityId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLanguageId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAreaEntitiesId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Content entity, long rowId) {
        entity.setContentId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Content entity) {
        if(entity != null) {
            return entity.getContentId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLanguageDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAreaEntitiesDao().getAllColumns());
            builder.append(" FROM CONTENT T");
            builder.append(" LEFT JOIN LANGUAGE T0 ON T.\"LANGUAGE_ID\"=T0.\"LANGUAGE_ID\"");
            builder.append(" LEFT JOIN AREA_ENTITIES T1 ON T.\"AREA_ENTITIES_ID\"=T1.\"AREA_ENTITIES_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Content loadCurrentDeep(Cursor cursor, boolean lock) {
        Content entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Language language = loadCurrentOther(daoSession.getLanguageDao(), cursor, offset);
        entity.setLanguage(language);
        offset += daoSession.getLanguageDao().getAllColumns().length;

        AreaEntities areaEntities = loadCurrentOther(daoSession.getAreaEntitiesDao(), cursor, offset);
        entity.setAreaEntities(areaEntities);

        return entity;    
    }

    public Content loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Content> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Content> list = new ArrayList<Content>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Content> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Content> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
