package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pocketwiki.pocketwiki.com.pocketwiki2.Dao.AudioPaths;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUDIO_PATHS".
*/
public class AudioPathsDao extends AbstractDao<AudioPaths, Long> {

    public static final String TABLENAME = "AUDIO_PATHS";

    /**
     * Properties of entity AudioPaths.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AudioPathId = new Property(0, Long.class, "audioPathId", true, "AUDIO_PATH_ID");
        public final static Property ContentId = new Property(1, Long.class, "contentId", false, "CONTENT_ID");
        public final static Property LanguageId = new Property(2, Long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property AudioPath = new Property(3, String.class, "audioPath", false, "AUDIO_PATH");
    };

    private Query<AudioPaths> content_AudioPathsListQuery;

    public AudioPathsDao(DaoConfig config) {
        super(config);
    }
    
    public AudioPathsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIO_PATHS\" (" + //
                "\"AUDIO_PATH_ID\" INTEGER PRIMARY KEY ," + // 0: audioPathId
                "\"CONTENT_ID\" INTEGER," + // 1: contentId
                "\"LANGUAGE_ID\" INTEGER," + // 2: languageId
                "\"AUDIO_PATH\" TEXT);"); // 3: audioPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIO_PATHS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AudioPaths entity) {
        stmt.clearBindings();
 
        Long audioPathId = entity.getAudioPathId();
        if (audioPathId != null) {
            stmt.bindLong(1, audioPathId);
        }
 
        Long contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindLong(2, contentId);
        }
 
        Long languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindLong(3, languageId);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(4, audioPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AudioPaths readEntity(Cursor cursor, int offset) {
        AudioPaths entity = new AudioPaths( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // audioPathId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contentId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // languageId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // audioPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AudioPaths entity, int offset) {
        entity.setAudioPathId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLanguageId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAudioPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AudioPaths entity, long rowId) {
        entity.setAudioPathId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AudioPaths entity) {
        if(entity != null) {
            return entity.getAudioPathId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "audioPathsList" to-many relationship of Content. */
    public List<AudioPaths> _queryContent_AudioPathsList(Long contentId) {
        synchronized (this) {
            if (content_AudioPathsListQuery == null) {
                QueryBuilder<AudioPaths> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContentId.eq(null));
                content_AudioPathsListQuery = queryBuilder.build();
            }
        }
        Query<AudioPaths> query = content_AudioPathsListQuery.forCurrentThread();
        query.setParameter(0, contentId);
        return query.list();
    }

}
