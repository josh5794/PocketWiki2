package pocketwiki.pocketwiki.com.pocketwiki2.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pocketwiki.pocketwiki.com.pocketwiki2.Dao.Language;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LANGUAGE".
*/
public class LanguageDao extends AbstractDao<Language, Long> {

    public static final String TABLENAME = "LANGUAGE";

    /**
     * Properties of entity Language.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LanguageId = new Property(0, Long.class, "languageId", true, "LANGUAGE_ID");
        public final static Property CreatedAt = new Property(1, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(2, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property DefaultLanguageFlag = new Property(4, Boolean.class, "defaultLanguageFlag", false, "DEFAULT_LANGUAGE_FLAG");
    };


    public LanguageDao(DaoConfig config) {
        super(config);
    }
    
    public LanguageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LANGUAGE\" (" + //
                "\"LANGUAGE_ID\" INTEGER PRIMARY KEY ," + // 0: languageId
                "\"CREATED_AT\" TEXT," + // 1: createdAt
                "\"UPDATED_AT\" TEXT," + // 2: updatedAt
                "\"NAME\" TEXT," + // 3: name
                "\"DEFAULT_LANGUAGE_FLAG\" INTEGER);"); // 4: defaultLanguageFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANGUAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Language entity) {
        stmt.clearBindings();
 
        Long languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindLong(1, languageId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(3, updatedAt);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Boolean defaultLanguageFlag = entity.getDefaultLanguageFlag();
        if (defaultLanguageFlag != null) {
            stmt.bindLong(5, defaultLanguageFlag ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Language readEntity(Cursor cursor, int offset) {
        Language entity = new Language( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // languageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // defaultLanguageFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Language entity, int offset) {
        entity.setLanguageId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDefaultLanguageFlag(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Language entity, long rowId) {
        entity.setLanguageId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Language entity) {
        if(entity != null) {
            return entity.getLanguageId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
